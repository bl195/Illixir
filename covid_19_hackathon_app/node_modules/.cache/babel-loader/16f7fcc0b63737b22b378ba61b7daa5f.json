{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n;\n\nvar utils = require('../internal/convert');\n\nvar v = require('../internal/validate');\n/**\n * A Find Place request takes a text input, and returns a place.\n * The text input can be any kind of Places data, for example,\n * a name, address, or phone number.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.findPlace\n * @function\n * @param {Object} query\n * @param {string} query.input\n * @param {string} query.inputtype\n * @param {string} [query.language]\n * @param {Array<string>} [query.fields]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\n\nexports.findPlace = {\n  url: 'https://maps.googleapis.com/maps/api/place/findplacefromtext/json',\n  validator: v.compose([v.object({\n    input: v.string,\n    inputtype: v.oneOf(['textquery', 'phonenumber']),\n    language: v.optional(v.string),\n    fields: v.optional(utils.arrayOf(v.compose([v.oneOf(['formatted_address', 'geometry', 'geometry/location', 'geometry/location/lat', 'geometry/location/lng', 'geometry/viewport', 'geometry/viewport/northeast', 'geometry/viewport/northeast/lat', 'geometry/viewport/northeast/lng', 'geometry/viewport/southwest', 'geometry/viewport/southwest/lat', 'geometry/viewport/southwest/lng', 'icon', 'id', 'name', 'permanently_closed', 'photos', 'place_id', 'scope', 'types', 'vicinity', 'opening_hours', 'price_level', 'rating', 'plus_code']), v.deprecate([\"alt_id\", \"id\", \"reference\", \"scope\"])]), ',')),\n    locationbias: v.optional(v.string),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  }), function (query) {\n    if (!query.locationbias || query.locationbias == 'ipbias') {\n      return query;\n    }\n\n    var isLatLng = function (latLng) {\n      latLng = latLng.split(',');\n      return latLng.length == 2 && !isNaN(latLng[0]) && !isNaN(latLng[1]);\n    };\n\n    var parts = query.locationbias.split(':');\n\n    switch (parts[0]) {\n      case 'point':\n        if (isLatLng(parts[parts.length - 1])) {\n          return query;\n        }\n\n        break;\n\n      case 'circle':\n        parts = parts[parts.length - 1].split('@');\n\n        if (!isNaN(parts[0]) && isLatLng(parts[parts.length - 1])) {\n          return query;\n        }\n\n        break;\n\n      case 'rectangle':\n        parts = parts[parts.length - 1].split('|');\n\n        if (parts.length == 2 && isLatLng(parts[0]) && isLatLng(parts[1])) {\n          return query;\n        }\n\n        break;\n    }\n\n    throw new v.InvalidValueError('invalid locationbias');\n  }])\n};\n/**\n * Makes a places request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.places\n * @function\n * @param {Object} query\n * @param {string} query.query\n * @param {string} [query.language]\n * @param {LatLng} [query.location]\n * @param {number} [query.radius]\n * @param {number} [query.minprice]\n * @param {number} [query.maxprice]\n * @param {boolean} [query.opennow]\n * @param {string} [query.type]\n * @param {string} [query.pagetoken]\n * @param {string} [query.region]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.places = {\n  url: 'https://maps.googleapis.com/maps/api/place/textsearch/json',\n  validator: v.object({\n    query: v.optional(v.string),\n    language: v.optional(v.string),\n    location: v.optional(utils.latLng),\n    radius: v.optional(v.number),\n    minprice: v.optional(v.number),\n    maxprice: v.optional(v.number),\n    opennow: v.optional(v.boolean),\n    type: v.optional(v.string),\n    pagetoken: v.optional(v.string),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number),\n    region: v.optional(v.string)\n  })\n};\n/**\n * Makes a nearby places request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.placesNearby\n * @function\n * @param {Object} query\n * @param {LatLng} query.location\n * @param {string} [query.language]\n * @param {number} [query.radius] Required unless using `rankby=distance`\n * @param {string} [query.keyword]\n * @param {number} [query.minprice]\n * @param {number} [query.maxprice]\n * @param {string} [query.name]\n * @param {boolean} [query.opennow]\n * @param {string} [query.rankby] Either 'prominence' or 'distance'\n * @param {string} [query.type]\n * @param {string} [query.pagetoken]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.placesNearby = {\n  url: 'https://maps.googleapis.com/maps/api/place/nearbysearch/json',\n  validator: v.compose([v.mutuallyExclusivePropertiesRequired(['location', 'pagetoken']), v.object({\n    location: v.optional(utils.latLng),\n    language: v.optional(v.string),\n    radius: v.optional(v.number),\n    keyword: v.optional(v.string),\n    minprice: v.optional(v.number),\n    maxprice: v.optional(v.number),\n    name: v.optional(v.string),\n    opennow: v.optional(v.boolean),\n    rankby: v.optional(v.oneOf(['prominence', 'distance'])),\n    type: v.optional(v.string),\n    pagetoken: v.optional(v.string),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })])\n};\n/**\n * Makes a place detail request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.place\n * @function\n * @param {Object} query\n * @param {string} query.placeid\n * @param {string} query.sessiontoken Unique string identifying a single user's session. For convenience use require('@google/maps').util.placesAutoCompleteSessionToken()\n * @param {string} [query.language]\n * @param {Array<string>} [query.fields]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.place = {\n  url: 'https://maps.googleapis.com/maps/api/place/details/json',\n  validator: v.object({\n    placeid: v.string,\n    sessiontoken: v.optional(v.string),\n    language: v.optional(v.string),\n    fields: v.optional(utils.arrayOf(v.compose([v.oneOf(['address_component', 'adr_address', 'alt_id', 'formatted_address', 'geometry', 'geometry/location', 'geometry/location/lat', 'geometry/location/lng', 'geometry/viewport', 'geometry/viewport/northeast', 'geometry/viewport/northeast/lat', 'geometry/viewport/northeast/lng', 'geometry/viewport/southwest', 'geometry/viewport/southwest/lat', 'geometry/viewport/southwest/lng', 'icon', 'id', 'name', 'permanently_closed', 'photo', 'place_id', 'scope', 'type', 'url', 'utc_offset', 'vicinity', 'formatted_phone_number', 'international_phone_number', 'opening_hours', 'website', 'price_level', 'rating', 'reviews', 'user_ratings_total', 'plus_code']), v.deprecate([\"alt_id\", \"id\", \"reference\", \"scope\"])]), ',')),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n/**\n * Makes a place photos request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.placesPhoto\n * @function\n * @param {Object} query\n * @param {string} query.photoreference\n * @param {number} [query.maxwidth]\n * @param {number} [query.maxheight]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.placesPhoto = {\n  url: 'https://maps.googleapis.com/maps/api/place/photo',\n  validator: v.compose([v.atLeastOneOfProperties(['maxwidth', 'maxheight']), v.object({\n    photoreference: v.string,\n    maxwidth: v.optional(v.number),\n    maxheight: v.optional(v.number),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })])\n};\n/**\n * Makes a places autocomplete request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.placesAutoComplete\n * @function\n * @param {Object} query\n * @param {string} query.input\n * @param {string} query.sessiontoken Unique string identifying a single user's session. For convenience use require('@google/maps').util.placesAutoCompleteSessionToken()\n * @param {number} [query.offset]\n * @param {LatLng} [query.location]\n * @param {string} [query.language]\n * @param {number} [query.radius]\n * @param {string} [query.origin]\n * @param {string} [query.types]\n * @param {Object} components\n * @param {boolean} [query.strictbounds]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.placesAutoComplete = {\n  url: 'https://maps.googleapis.com/maps/api/place/autocomplete/json',\n  validator: v.object({\n    input: v.string,\n    sessiontoken: v.optional(v.string),\n    offset: v.optional(v.number),\n    location: v.optional(utils.latLng),\n    language: v.optional(v.string),\n    radius: v.optional(v.number),\n    origin: v.optional(v.string),\n    types: v.optional(v.oneOf(['geocode', 'address', 'establishment', '(regions)', '(cities)'])),\n    components: v.optional(utils.pipedKeyValues),\n    strictbounds: v.optional(v.boolean),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n/**\n * Makes a places query autocomplete request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.placesQueryAutoComplete\n * @function\n * @param {Object} query\n * @param {string} query.input\n * @param {number} [query.offset]\n * @param {LatLng} [query.location]\n * @param {string} [query.language]\n * @param {number} [query.radius]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.placesQueryAutoComplete = {\n  url: 'https://maps.googleapis.com/maps/api/place/queryautocomplete/json',\n  validator: v.object({\n    input: v.string,\n    offset: v.optional(v.number),\n    location: v.optional(utils.latLng),\n    language: v.optional(v.string),\n    radius: v.optional(v.number),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};","map":{"version":3,"sources":["/Users/brianli/Desktop/covid-19-app/covid-19-app/covid_19_hackathon_app/node_modules/@google/maps/lib/apis/places.js"],"names":["utils","require","v","exports","findPlace","url","validator","compose","object","input","string","inputtype","oneOf","language","optional","fields","arrayOf","deprecate","locationbias","retryOptions","timeout","number","query","isLatLng","latLng","split","length","isNaN","parts","InvalidValueError","places","location","radius","minprice","maxprice","opennow","boolean","type","pagetoken","region","placesNearby","mutuallyExclusivePropertiesRequired","keyword","name","rankby","place","placeid","sessiontoken","placesPhoto","atLeastOneOfProperties","photoreference","maxwidth","maxheight","placesAutoComplete","offset","origin","types","components","pipedKeyValues","strictbounds","placesQueryAutoComplete"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */;\n\nvar utils = require('../internal/convert');\nvar v = require('../internal/validate');\n\n/**\n * A Find Place request takes a text input, and returns a place.\n * The text input can be any kind of Places data, for example,\n * a name, address, or phone number.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.findPlace\n * @function\n * @param {Object} query\n * @param {string} query.input\n * @param {string} query.inputtype\n * @param {string} [query.language]\n * @param {Array<string>} [query.fields]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.findPlace = {\n  url: 'https://maps.googleapis.com/maps/api/place/findplacefromtext/json',\n  validator: v.compose([\n    v.object({\n      input: v.string,\n      inputtype: v.oneOf(['textquery', 'phonenumber']),\n      language: v.optional(v.string),\n      fields: v.optional(utils.arrayOf(v.compose([v.oneOf([\n        'formatted_address', 'geometry', 'geometry/location', 'geometry/location/lat',\n        'geometry/location/lng', 'geometry/viewport', 'geometry/viewport/northeast',\n        'geometry/viewport/northeast/lat', 'geometry/viewport/northeast/lng',\n        'geometry/viewport/southwest', 'geometry/viewport/southwest/lat',\n        'geometry/viewport/southwest/lng', 'icon', 'id', 'name',\n        'permanently_closed', 'photos', 'place_id', 'scope', 'types',\n        'vicinity', 'opening_hours', 'price_level', 'rating', 'plus_code'\n      ]), v.deprecate([\"alt_id\", \"id\", \"reference\", \"scope\"])]), ',')),\n      locationbias: v.optional(v.string),\n      retryOptions: v.optional(utils.retryOptions),\n      timeout: v.optional(v.number)\n    }),\n    function (query) {\n      if (!query.locationbias || query.locationbias == 'ipbias') {\n        return query;\n      }\n      var isLatLng = function (latLng) {\n        latLng = latLng.split(',');\n        return latLng.length == 2 && !isNaN(latLng[0]) && !isNaN(latLng[1]);\n      };\n      var parts = query.locationbias.split(':');\n      switch (parts[0]) {\n        case 'point':\n          if (isLatLng(parts[parts.length - 1])) {\n            return query;\n          }\n          break;\n        case 'circle':\n          parts = parts[parts.length - 1].split('@');\n          if (!isNaN(parts[0]) && isLatLng(parts[parts.length - 1])) {\n            return query;\n          }\n          break;\n        case 'rectangle':\n          parts = parts[parts.length - 1].split('|');\n          if (parts.length == 2 && isLatLng(parts[0]) && isLatLng(parts[1])) {\n            return query;\n          }\n          break;\n      }\n      throw new v.InvalidValueError('invalid locationbias');\n    }\n  ])\n};\n\n/**\n * Makes a places request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.places\n * @function\n * @param {Object} query\n * @param {string} query.query\n * @param {string} [query.language]\n * @param {LatLng} [query.location]\n * @param {number} [query.radius]\n * @param {number} [query.minprice]\n * @param {number} [query.maxprice]\n * @param {boolean} [query.opennow]\n * @param {string} [query.type]\n * @param {string} [query.pagetoken]\n * @param {string} [query.region]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.places = {\n  url: 'https://maps.googleapis.com/maps/api/place/textsearch/json',\n  validator: v.object({\n    query: v.optional(v.string),\n    language: v.optional(v.string),\n    location: v.optional(utils.latLng),\n    radius: v.optional(v.number),\n    minprice: v.optional(v.number),\n    maxprice: v.optional(v.number),\n    opennow: v.optional(v.boolean),\n    type: v.optional(v.string),\n    pagetoken: v.optional(v.string),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number),\n    region: v.optional(v.string)\n  })\n};\n\n/**\n * Makes a nearby places request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.placesNearby\n * @function\n * @param {Object} query\n * @param {LatLng} query.location\n * @param {string} [query.language]\n * @param {number} [query.radius] Required unless using `rankby=distance`\n * @param {string} [query.keyword]\n * @param {number} [query.minprice]\n * @param {number} [query.maxprice]\n * @param {string} [query.name]\n * @param {boolean} [query.opennow]\n * @param {string} [query.rankby] Either 'prominence' or 'distance'\n * @param {string} [query.type]\n * @param {string} [query.pagetoken]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.placesNearby = {\n  url: 'https://maps.googleapis.com/maps/api/place/nearbysearch/json',\n  validator: v.compose([\n    v.mutuallyExclusivePropertiesRequired(['location', 'pagetoken']),\n    v.object({\n      location: v.optional(utils.latLng),\n      language: v.optional(v.string),\n      radius: v.optional(v.number),\n      keyword: v.optional(v.string),\n      minprice: v.optional(v.number),\n      maxprice: v.optional(v.number),\n      name: v.optional(v.string),\n      opennow: v.optional(v.boolean),\n      rankby: v.optional(v.oneOf(['prominence', 'distance'])),\n      type: v.optional(v.string),\n      pagetoken: v.optional(v.string),\n      retryOptions: v.optional(utils.retryOptions),\n      timeout: v.optional(v.number)\n    })\n  ])\n};\n\n/**\n * Makes a place detail request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.place\n * @function\n * @param {Object} query\n * @param {string} query.placeid\n * @param {string} query.sessiontoken Unique string identifying a single user's session. For convenience use require('@google/maps').util.placesAutoCompleteSessionToken()\n * @param {string} [query.language]\n * @param {Array<string>} [query.fields]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.place = {\n  url: 'https://maps.googleapis.com/maps/api/place/details/json',\n  validator: v.object({\n    placeid: v.string,\n    sessiontoken: v.optional(v.string),\n    language: v.optional(v.string),\n    fields: v.optional(utils.arrayOf(v.compose([v.oneOf([\n      'address_component', 'adr_address', 'alt_id', 'formatted_address',\n      'geometry', 'geometry/location', 'geometry/location/lat',\n      'geometry/location/lng', 'geometry/viewport', 'geometry/viewport/northeast',\n      'geometry/viewport/northeast/lat', 'geometry/viewport/northeast/lng',\n      'geometry/viewport/southwest', 'geometry/viewport/southwest/lat',\n      'geometry/viewport/southwest/lng', 'icon', 'id', 'name', 'permanently_closed', 'photo',\n      'place_id', 'scope', 'type', 'url', 'utc_offset', 'vicinity',\n      'formatted_phone_number', 'international_phone_number', 'opening_hours',\n      'website', 'price_level', 'rating', 'reviews', 'user_ratings_total', 'plus_code'\n    ]), v.deprecate([\"alt_id\", \"id\", \"reference\", \"scope\"])]), ',')),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n\n/**\n * Makes a place photos request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.placesPhoto\n * @function\n * @param {Object} query\n * @param {string} query.photoreference\n * @param {number} [query.maxwidth]\n * @param {number} [query.maxheight]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.placesPhoto = {\n  url: 'https://maps.googleapis.com/maps/api/place/photo',\n  validator: v.compose([\n    v.atLeastOneOfProperties(['maxwidth', 'maxheight']),\n    v.object({\n      photoreference: v.string,\n      maxwidth: v.optional(v.number),\n      maxheight: v.optional(v.number),\n      retryOptions: v.optional(utils.retryOptions),\n      timeout: v.optional(v.number)\n    })\n  ])\n};\n\n/**\n * Makes a places autocomplete request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.placesAutoComplete\n * @function\n * @param {Object} query\n * @param {string} query.input\n * @param {string} query.sessiontoken Unique string identifying a single user's session. For convenience use require('@google/maps').util.placesAutoCompleteSessionToken()\n * @param {number} [query.offset]\n * @param {LatLng} [query.location]\n * @param {string} [query.language]\n * @param {number} [query.radius]\n * @param {string} [query.origin]\n * @param {string} [query.types]\n * @param {Object} components\n * @param {boolean} [query.strictbounds]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.placesAutoComplete = {\n  url: 'https://maps.googleapis.com/maps/api/place/autocomplete/json',\n  validator: v.object({\n    input: v.string,\n    sessiontoken: v.optional(v.string),\n    offset: v.optional(v.number),\n    location: v.optional(utils.latLng),\n    language: v.optional(v.string),\n    radius: v.optional(v.number),\n    origin: v.optional(v.string),\n    types: v.optional(v.oneOf(['geocode', 'address', 'establishment', '(regions)', '(cities)'])),\n    components: v.optional(utils.pipedKeyValues),\n    strictbounds: v.optional(v.boolean),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n\n\n/**\n * Makes a places query autocomplete request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.placesQueryAutoComplete\n * @function\n * @param {Object} query\n * @param {string} query.input\n * @param {number} [query.offset]\n * @param {LatLng} [query.location]\n * @param {string} [query.language]\n * @param {number} [query.radius]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.placesQueryAutoComplete = {\n  url: 'https://maps.googleapis.com/maps/api/place/queryautocomplete/json',\n  validator: v.object({\n    input: v.string,\n    offset: v.optional(v.number),\n    location: v.optional(utils.latLng),\n    language: v.optional(v.string),\n    radius: v.optional(v.number),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n"]},"metadata":{},"sourceType":"script"}