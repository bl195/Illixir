{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n;\n\nvar utils = require('../internal/convert');\n\nvar v = require('../internal/validate');\n/**\n * Makes a snap-to-roads request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.snapToRoads\n * @function\n * @param {Object} query\n * @param {LatLng[]} query.path\n * @param {boolean} [query.interpolate]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\n\nexports.snapToRoads = {\n  url: 'https://roads.googleapis.com/v1/snapToRoads',\n  supportsClientId: false,\n  validator: v.object({\n    path: utils.arrayOf(utils.latLng),\n    interpolate: v.optional(v.boolean),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n/**\n * Makes a nearest roads request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.nearestRoads\n * @function\n * @param {Object} query\n * @param {LatLng[]} query.points\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.nearestRoads = {\n  url: 'https://roads.googleapis.com/v1/nearestRoads',\n  supportsClientId: false,\n  validator: v.object({\n    points: utils.arrayOf(utils.latLng),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n/**\n * Makes a speed-limits request for a place ID. For speed-limits\n * requests using a path parameter, use the snappedSpeedLimits method.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.speedLimits\n * @function\n * @param {Object} query\n * @param {string[]} query.placeId\n * @param {string} [query.units] Either 'KPH' or 'MPH'\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.speedLimits = {\n  url: 'https://roads.googleapis.com/v1/speedLimits',\n  supportsClientId: false,\n  validator: v.object({\n    placeId: v.array(v.string),\n    units: v.optional(v.oneOf(['KPH', 'MPH'])),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n/**\n * Makes a speed-limits request for a path.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.snappedSpeedLimits\n * @function\n * @param {Object} query\n * @param {LatLng[]} query.path\n * @param {string} [query.units] Either 'KPH' or 'MPH'\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.snappedSpeedLimits = {\n  url: 'https://roads.googleapis.com/v1/speedLimits',\n  supportsClientId: false,\n  validator: v.object({\n    path: utils.arrayOf(utils.latLng),\n    units: v.optional(v.oneOf(['KPH', 'MPH'])),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};","map":{"version":3,"sources":["/Users/brianli/Desktop/covid-19-app/covid-19-app/covid_19_hackathon_app/node_modules/@google/maps/lib/apis/roads.js"],"names":["utils","require","v","exports","snapToRoads","url","supportsClientId","validator","object","path","arrayOf","latLng","interpolate","optional","boolean","retryOptions","timeout","number","nearestRoads","points","speedLimits","placeId","array","string","units","oneOf","snappedSpeedLimits"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAeG;;AAEH,IAAIA,KAAK,GAAGC,OAAO,CAAC,qBAAD,CAAnB;;AACA,IAAIC,CAAC,GAAGD,OAAO,CAAC,sBAAD,CAAf;AAEA;;;;;;;;;;;;;;AAYAE,OAAO,CAACC,WAAR,GAAsB;AACpBC,EAAAA,GAAG,EAAE,6CADe;AAEpBC,EAAAA,gBAAgB,EAAE,KAFE;AAGpBC,EAAAA,SAAS,EAAEL,CAAC,CAACM,MAAF,CAAS;AAClBC,IAAAA,IAAI,EAAET,KAAK,CAACU,OAAN,CAAcV,KAAK,CAACW,MAApB,CADY;AAElBC,IAAAA,WAAW,EAAEV,CAAC,CAACW,QAAF,CAAWX,CAAC,CAACY,OAAb,CAFK;AAGlBC,IAAAA,YAAY,EAAEb,CAAC,CAACW,QAAF,CAAWb,KAAK,CAACe,YAAjB,CAHI;AAIlBC,IAAAA,OAAO,EAAEd,CAAC,CAACW,QAAF,CAAWX,CAAC,CAACe,MAAb;AAJS,GAAT;AAHS,CAAtB;AAWA;;;;;;;;;;;;AAWAd,OAAO,CAACe,YAAR,GAAuB;AACrBb,EAAAA,GAAG,EAAE,8CADgB;AAErBC,EAAAA,gBAAgB,EAAE,KAFG;AAGrBC,EAAAA,SAAS,EAAEL,CAAC,CAACM,MAAF,CAAS;AAClBW,IAAAA,MAAM,EAAEnB,KAAK,CAACU,OAAN,CAAcV,KAAK,CAACW,MAApB,CADU;AAElBI,IAAAA,YAAY,EAAEb,CAAC,CAACW,QAAF,CAAWb,KAAK,CAACe,YAAjB,CAFI;AAGlBC,IAAAA,OAAO,EAAEd,CAAC,CAACW,QAAF,CAAWX,CAAC,CAACe,MAAb;AAHS,GAAT;AAHU,CAAvB;AAUA;;;;;;;;;;;;;;AAaAd,OAAO,CAACiB,WAAR,GAAsB;AACpBf,EAAAA,GAAG,EAAE,6CADe;AAEpBC,EAAAA,gBAAgB,EAAE,KAFE;AAGpBC,EAAAA,SAAS,EAAEL,CAAC,CAACM,MAAF,CAAS;AAClBa,IAAAA,OAAO,EAAEnB,CAAC,CAACoB,KAAF,CAAQpB,CAAC,CAACqB,MAAV,CADS;AAElBC,IAAAA,KAAK,EAAEtB,CAAC,CAACW,QAAF,CAAWX,CAAC,CAACuB,KAAF,CAAQ,CAAC,KAAD,EAAQ,KAAR,CAAR,CAAX,CAFW;AAGlBV,IAAAA,YAAY,EAAEb,CAAC,CAACW,QAAF,CAAWb,KAAK,CAACe,YAAjB,CAHI;AAIlBC,IAAAA,OAAO,EAAEd,CAAC,CAACW,QAAF,CAAWX,CAAC,CAACe,MAAb;AAJS,GAAT;AAHS,CAAtB;AAWA;;;;;;;;;;;;;AAYAd,OAAO,CAACuB,kBAAR,GAA6B;AAC3BrB,EAAAA,GAAG,EAAE,6CADsB;AAE3BC,EAAAA,gBAAgB,EAAE,KAFS;AAG3BC,EAAAA,SAAS,EAAEL,CAAC,CAACM,MAAF,CAAS;AAClBC,IAAAA,IAAI,EAAET,KAAK,CAACU,OAAN,CAAcV,KAAK,CAACW,MAApB,CADY;AAElBa,IAAAA,KAAK,EAAEtB,CAAC,CAACW,QAAF,CAAWX,CAAC,CAACuB,KAAF,CAAQ,CAAC,KAAD,EAAQ,KAAR,CAAR,CAAX,CAFW;AAGlBV,IAAAA,YAAY,EAAEb,CAAC,CAACW,QAAF,CAAWb,KAAK,CAACe,YAAjB,CAHI;AAIlBC,IAAAA,OAAO,EAAEd,CAAC,CAACW,QAAF,CAAWX,CAAC,CAACe,MAAb;AAJS,GAAT;AAHgB,CAA7B","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */;\n\nvar utils = require('../internal/convert');\nvar v = require('../internal/validate');\n\n/**\n * Makes a snap-to-roads request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.snapToRoads\n * @function\n * @param {Object} query\n * @param {LatLng[]} query.path\n * @param {boolean} [query.interpolate]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.snapToRoads = {\n  url: 'https://roads.googleapis.com/v1/snapToRoads',\n  supportsClientId: false,\n  validator: v.object({\n    path: utils.arrayOf(utils.latLng),\n    interpolate: v.optional(v.boolean),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n\n/**\n * Makes a nearest roads request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.nearestRoads\n * @function\n * @param {Object} query\n * @param {LatLng[]} query.points\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.nearestRoads = {\n  url: 'https://roads.googleapis.com/v1/nearestRoads',\n  supportsClientId: false,\n  validator: v.object({\n    points: utils.arrayOf(utils.latLng),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n\n/**\n * Makes a speed-limits request for a place ID. For speed-limits\n * requests using a path parameter, use the snappedSpeedLimits method.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.speedLimits\n * @function\n * @param {Object} query\n * @param {string[]} query.placeId\n * @param {string} [query.units] Either 'KPH' or 'MPH'\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.speedLimits = {\n  url: 'https://roads.googleapis.com/v1/speedLimits',\n  supportsClientId: false,\n  validator: v.object({\n    placeId: v.array(v.string),\n    units: v.optional(v.oneOf(['KPH', 'MPH'])),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n\n/**\n * Makes a speed-limits request for a path.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.snappedSpeedLimits\n * @function\n * @param {Object} query\n * @param {LatLng[]} query.path\n * @param {string} [query.units] Either 'KPH' or 'MPH'\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.snappedSpeedLimits = {\n  url: 'https://roads.googleapis.com/v1/speedLimits',\n  supportsClientId: false,\n  validator: v.object({\n    path: utils.arrayOf(utils.latLng),\n    units: v.optional(v.oneOf(['KPH', 'MPH'])),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n"]},"metadata":{},"sourceType":"script"}