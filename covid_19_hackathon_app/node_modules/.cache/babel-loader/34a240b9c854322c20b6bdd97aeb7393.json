{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n;\n\nvar utils = require('../internal/convert');\n\nvar v = require('../internal/validate');\n/**\n * Makes a directions request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.directions\n * @function\n * @param {Object} query\n * @param {LatLng} query.origin\n * @param {LatLng} query.destination\n * @param {string} [query.mode]\n * @param {LatLng[]} [query.waypoints]\n * @param {boolean} [query.alternatives]\n * @param {string[]} [query.avoid]\n * @param {string} [query.language]\n * @param {string} [query.units]\n * @param {string} [query.region]\n * @param {Date|number} [query.departure_time]\n * @param {Date|number} [query.arrival_time]\n * @param {string} [query.traffic_model]\n * @param {string[]} [query.transit_mode]\n * @param {string} [query.transit_routing_preference]\n * @param {boolean} [query.optimize]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\n\nexports.directions = {\n  url: 'https://maps.googleapis.com/maps/api/directions/json',\n  validator: v.compose([v.mutuallyExclusiveProperties(['arrival_time', 'departure_time']), v.object({\n    origin: utils.latLng,\n    destination: utils.latLng,\n    mode: v.optional(v.oneOf(['driving', 'walking', 'bicycling', 'transit'])),\n    waypoints: v.optional(utils.arrayOf(utils.latLng)),\n    alternatives: v.optional(v.boolean),\n    avoid: v.optional(utils.arrayOf(v.oneOf(['tolls', 'highways', 'ferries', 'indoor']))),\n    language: v.optional(v.string),\n    units: v.optional(v.oneOf(['metric', 'imperial'])),\n    region: v.optional(v.string),\n    departure_time: v.optional(utils.timeStamp),\n    arrival_time: v.optional(utils.timeStamp),\n    traffic_model: v.optional(v.oneOf(['best_guess', 'pessimistic', 'optimistic'])),\n    transit_mode: v.optional(utils.arrayOf(v.oneOf(['bus', 'subway', 'train', 'tram', 'rail']))),\n    transit_routing_preference: v.optional(v.oneOf(['less_walking', 'fewer_transfers'])),\n    optimize: v.optional(v.boolean),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  }), function (query) {\n    if (query.waypoints && query.optimize) {\n      query.waypoints = 'optimize:true|' + query.waypoints;\n    }\n\n    delete query.optimize;\n\n    if (query.waypoints && query.mode === 'transit') {\n      throw new v.InvalidValueError('cannot specify waypoints with transit');\n    }\n\n    if (query.traffic_model && !query.departure_time) {\n      throw new v.InvalidValueError('traffic_model requires departure_time');\n    }\n\n    return query;\n  }])\n};","map":{"version":3,"sources":["/Users/brianli/Desktop/covid-19-app/covid-19-app/covid_19_hackathon_app/node_modules/@google/maps/lib/apis/directions.js"],"names":["utils","require","v","exports","directions","url","validator","compose","mutuallyExclusiveProperties","object","origin","latLng","destination","mode","optional","oneOf","waypoints","arrayOf","alternatives","boolean","avoid","language","string","units","region","departure_time","timeStamp","arrival_time","traffic_model","transit_mode","transit_routing_preference","optimize","retryOptions","timeout","number","query","InvalidValueError"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */;\n\nvar utils = require('../internal/convert');\nvar v = require('../internal/validate');\n\n/**\n * Makes a directions request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.directions\n * @function\n * @param {Object} query\n * @param {LatLng} query.origin\n * @param {LatLng} query.destination\n * @param {string} [query.mode]\n * @param {LatLng[]} [query.waypoints]\n * @param {boolean} [query.alternatives]\n * @param {string[]} [query.avoid]\n * @param {string} [query.language]\n * @param {string} [query.units]\n * @param {string} [query.region]\n * @param {Date|number} [query.departure_time]\n * @param {Date|number} [query.arrival_time]\n * @param {string} [query.traffic_model]\n * @param {string[]} [query.transit_mode]\n * @param {string} [query.transit_routing_preference]\n * @param {boolean} [query.optimize]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.directions = {\n  url: 'https://maps.googleapis.com/maps/api/directions/json',\n  validator: v.compose([\n    v.mutuallyExclusiveProperties(['arrival_time', 'departure_time']),\n    v.object({\n      origin: utils.latLng,\n      destination: utils.latLng,\n      mode: v.optional(v.oneOf([\n        'driving', 'walking', 'bicycling', 'transit'\n      ])),\n      waypoints: v.optional(utils.arrayOf(utils.latLng)),\n      alternatives: v.optional(v.boolean),\n      avoid: v.optional(utils.arrayOf(v.oneOf([\n        'tolls', 'highways', 'ferries', 'indoor'\n      ]))),\n      language: v.optional(v.string),\n      units: v.optional(v.oneOf(['metric', 'imperial'])),\n      region: v.optional(v.string),\n      departure_time: v.optional(utils.timeStamp),\n      arrival_time: v.optional(utils.timeStamp),\n      traffic_model: v.optional(v.oneOf([\n        'best_guess', 'pessimistic', 'optimistic'\n      ])),\n      transit_mode: v.optional(utils.arrayOf(v.oneOf([\n        'bus', 'subway', 'train', 'tram', 'rail'\n      ]))),\n      transit_routing_preference: v.optional(v.oneOf([\n        'less_walking', 'fewer_transfers'\n      ])),\n      optimize: v.optional(v.boolean),\n      retryOptions: v.optional(utils.retryOptions),\n      timeout: v.optional(v.number)\n    }),\n    function(query) {\n      if (query.waypoints && query.optimize) {\n        query.waypoints = 'optimize:true|' + query.waypoints;\n      }\n      delete query.optimize;\n\n      if (query.waypoints && query.mode === 'transit') {\n        throw new v.InvalidValueError('cannot specify waypoints with transit');\n      }\n\n      if (query.traffic_model && !query.departure_time) {\n        throw new v.InvalidValueError('traffic_model requires departure_time');\n      }\n      return query;\n    }\n  ])\n};\n"]},"metadata":{},"sourceType":"script"}