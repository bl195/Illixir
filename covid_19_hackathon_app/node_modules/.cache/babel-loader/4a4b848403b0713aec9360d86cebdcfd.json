{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexports.inject = function (wait) {\n  var Task = require('./task');\n\n  return {\n    /**\n     * Repeatedly calls the 'do' function, until its result passes the 'until'\n     * predicate, or timeout. The 'do' function is retried with exponential\n     * backoff.\n     *\n     * @param {function(): Task<T>} options.do Starts the task to try\n     *     repeatedly.\n     * @param {function(T): boolean} options.until A predicate that checks\n     *     whether the result of options.do was successful.\n     * @return {Task<T>}\n     * @template T\n     */\n    attempt: function (options) {\n      var doSomething = options['do'];\n      var isSuccessful = options.until;\n      var interval = options.interval || 500;\n      var increment = options.increment || 1.5;\n      var jitter = options.jitter || 0.5;\n      return Task.withValue().thenDo(function loop() {\n        return doSomething().thenDo(function (result) {\n          if (isSuccessful(result)) {\n            return Task.withValue(result);\n          }\n\n          var delay = interval * (1 + jitter * (2 * Math.random() - 1));\n          interval *= increment;\n          return wait(delay).thenDo(loop);\n        });\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/brianli/Desktop/covid-19-app/covid-19-app/covid_19_hackathon_app/node_modules/@google/maps/lib/internal/attempt.js"],"names":["exports","inject","wait","Task","require","attempt","options","doSomething","isSuccessful","until","interval","increment","jitter","withValue","thenDo","loop","result","delay","Math","random"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBAA,OAAO,CAACC,MAAR,GAAiB,UAASC,IAAT,EAAe;AAC9B,MAAIC,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AAEA,SAAO;AACL;;;;;;;;;;;;AAYAC,IAAAA,OAAO,EAAE,UAASC,OAAT,EAAkB;AACzB,UAAIC,WAAW,GAAGD,OAAO,CAAC,IAAD,CAAzB;AACA,UAAIE,YAAY,GAAGF,OAAO,CAACG,KAA3B;AACA,UAAIC,QAAQ,GAAGJ,OAAO,CAACI,QAAR,IAAoB,GAAnC;AACA,UAAIC,SAAS,GAAGL,OAAO,CAACK,SAAR,IAAqB,GAArC;AACA,UAAIC,MAAM,GAAGN,OAAO,CAACM,MAAR,IAAkB,GAA/B;AAEA,aAAOT,IAAI,CAACU,SAAL,GAAiBC,MAAjB,CAAwB,SAASC,IAAT,GAAgB;AAC7C,eAAOR,WAAW,GAAGO,MAAd,CAAqB,UAASE,MAAT,EAAiB;AAC3C,cAAIR,YAAY,CAACQ,MAAD,CAAhB,EAA0B;AACxB,mBAAOb,IAAI,CAACU,SAAL,CAAeG,MAAf,CAAP;AACD;;AAED,cAAIC,KAAK,GAAGP,QAAQ,IAAI,IAAIE,MAAM,IAAI,IAAIM,IAAI,CAACC,MAAL,EAAJ,GAAoB,CAAxB,CAAd,CAApB;AACAT,UAAAA,QAAQ,IAAIC,SAAZ;AACA,iBAAOT,IAAI,CAACe,KAAD,CAAJ,CAAYH,MAAZ,CAAmBC,IAAnB,CAAP;AACD,SARM,CAAP;AASD,OAVM,CAAP;AAWD;AA/BI,GAAP;AAiCD,CApCD","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexports.inject = function(wait) {\n  var Task = require('./task');\n\n  return {\n    /**\n     * Repeatedly calls the 'do' function, until its result passes the 'until'\n     * predicate, or timeout. The 'do' function is retried with exponential\n     * backoff.\n     *\n     * @param {function(): Task<T>} options.do Starts the task to try\n     *     repeatedly.\n     * @param {function(T): boolean} options.until A predicate that checks\n     *     whether the result of options.do was successful.\n     * @return {Task<T>}\n     * @template T\n     */\n    attempt: function(options) {\n      var doSomething = options['do'];\n      var isSuccessful = options.until;\n      var interval = options.interval || 500;\n      var increment = options.increment || 1.5;\n      var jitter = options.jitter || 0.5;\n\n      return Task.withValue().thenDo(function loop() {\n        return doSomething().thenDo(function(result) {\n          if (isSuccessful(result)) {\n            return Task.withValue(result);\n          }\n\n          var delay = interval * (1 + jitter * (2 * Math.random() - 1));\n          interval *= increment;\n          return wait(delay).thenDo(loop);\n        });\n      });\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"script"}