{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n;\n\nvar utils = require('../internal/convert');\n\nvar v = require('../internal/validate');\n/**\n * Makes a distance matrix request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.distanceMatrix\n * @function\n * @param {Object} query\n * @param {LatLng[]} query.origins\n * @param {LatLng[]} query.destinations\n * @param {string} [query.mode]\n * @param {string} [query.language]\n * @param {string[]} [query.avoid]\n * @param {string} [query.units]\n * @param {Date|number} [query.departure_time]\n * @param {Date|number} [query.arrival_time]\n * @param {string[]} [query.transit_mode]\n * @param {string} [query.transit_routing_preference]\n * @param {string} [query.traffic_model]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\n\nexports.distanceMatrix = {\n  url: 'https://maps.googleapis.com/maps/api/distancematrix/json',\n  validator: v.compose([v.mutuallyExclusiveProperties(['arrival_time', 'departure_time']), v.object({\n    origins: utils.arrayOf(utils.latLng),\n    destinations: utils.arrayOf(utils.latLng),\n    mode: v.optional(v.oneOf(['driving', 'walking', 'bicycling', 'transit'])),\n    language: v.optional(v.string),\n    region: v.optional(v.string),\n    avoid: v.optional(utils.arrayOf(v.oneOf(['tolls', 'highways', 'ferries', 'indoor']))),\n    units: v.optional(v.oneOf(['metric', 'imperial'])),\n    departure_time: v.optional(utils.timeStamp),\n    arrival_time: v.optional(utils.timeStamp),\n    transit_mode: v.optional(utils.arrayOf(v.oneOf(['bus', 'subway', 'train', 'tram', 'rail']))),\n    transit_routing_preference: v.optional(v.oneOf(['less_walking', 'fewer_transfers'])),\n    traffic_model: v.optional(v.oneOf(['best_guess', 'pessimistic', 'optimistic'])),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })])\n};","map":{"version":3,"sources":["/Users/brianli/Desktop/covid-19-app/covid-19-app/covid_19_hackathon_app/node_modules/@google/maps/lib/apis/distance-matrix.js"],"names":["utils","require","v","exports","distanceMatrix","url","validator","compose","mutuallyExclusiveProperties","object","origins","arrayOf","latLng","destinations","mode","optional","oneOf","language","string","region","avoid","units","departure_time","timeStamp","arrival_time","transit_mode","transit_routing_preference","traffic_model","retryOptions","timeout","number"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAeG;;AAEH,IAAIA,KAAK,GAAGC,OAAO,CAAC,qBAAD,CAAnB;;AACA,IAAIC,CAAC,GAAGD,OAAO,CAAC,sBAAD,CAAf;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAqBAE,OAAO,CAACC,cAAR,GAAyB;AACvBC,EAAAA,GAAG,EAAE,0DADkB;AAEvBC,EAAAA,SAAS,EAAEJ,CAAC,CAACK,OAAF,CAAU,CACnBL,CAAC,CAACM,2BAAF,CAA8B,CAAC,cAAD,EAAiB,gBAAjB,CAA9B,CADmB,EAEnBN,CAAC,CAACO,MAAF,CAAS;AACPC,IAAAA,OAAO,EAAEV,KAAK,CAACW,OAAN,CAAcX,KAAK,CAACY,MAApB,CADF;AAEPC,IAAAA,YAAY,EAAEb,KAAK,CAACW,OAAN,CAAcX,KAAK,CAACY,MAApB,CAFP;AAGPE,IAAAA,IAAI,EAAEZ,CAAC,CAACa,QAAF,CAAWb,CAAC,CAACc,KAAF,CAAQ,CACvB,SADuB,EACZ,SADY,EACD,WADC,EACY,SADZ,CAAR,CAAX,CAHC;AAMPC,IAAAA,QAAQ,EAAEf,CAAC,CAACa,QAAF,CAAWb,CAAC,CAACgB,MAAb,CANH;AAOPC,IAAAA,MAAM,EAAEjB,CAAC,CAACa,QAAF,CAAWb,CAAC,CAACgB,MAAb,CAPD;AAQPE,IAAAA,KAAK,EAAElB,CAAC,CAACa,QAAF,CAAWf,KAAK,CAACW,OAAN,CAAcT,CAAC,CAACc,KAAF,CAAQ,CACtC,OADsC,EAC7B,UAD6B,EACjB,SADiB,EACN,QADM,CAAR,CAAd,CAAX,CARA;AAWPK,IAAAA,KAAK,EAAEnB,CAAC,CAACa,QAAF,CAAWb,CAAC,CAACc,KAAF,CAAQ,CAAC,QAAD,EAAW,UAAX,CAAR,CAAX,CAXA;AAYPM,IAAAA,cAAc,EAAEpB,CAAC,CAACa,QAAF,CAAWf,KAAK,CAACuB,SAAjB,CAZT;AAaPC,IAAAA,YAAY,EAAEtB,CAAC,CAACa,QAAF,CAAWf,KAAK,CAACuB,SAAjB,CAbP;AAcPE,IAAAA,YAAY,EAAEvB,CAAC,CAACa,QAAF,CAAWf,KAAK,CAACW,OAAN,CAAcT,CAAC,CAACc,KAAF,CAAQ,CAC7C,KAD6C,EACtC,QADsC,EAC5B,OAD4B,EACnB,MADmB,EACX,MADW,CAAR,CAAd,CAAX,CAdP;AAiBPU,IAAAA,0BAA0B,EAAExB,CAAC,CAACa,QAAF,CAAWb,CAAC,CAACc,KAAF,CAAQ,CAC7C,cAD6C,EAC7B,iBAD6B,CAAR,CAAX,CAjBrB;AAoBPW,IAAAA,aAAa,EAAEzB,CAAC,CAACa,QAAF,CAAWb,CAAC,CAACc,KAAF,CAAQ,CAChC,YADgC,EAClB,aADkB,EACH,YADG,CAAR,CAAX,CApBR;AAuBPY,IAAAA,YAAY,EAAE1B,CAAC,CAACa,QAAF,CAAWf,KAAK,CAAC4B,YAAjB,CAvBP;AAwBPC,IAAAA,OAAO,EAAE3B,CAAC,CAACa,QAAF,CAAWb,CAAC,CAAC4B,MAAb;AAxBF,GAAT,CAFmB,CAAV;AAFY,CAAzB","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */;\n\nvar utils = require('../internal/convert');\nvar v = require('../internal/validate');\n\n/**\n * Makes a distance matrix request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.distanceMatrix\n * @function\n * @param {Object} query\n * @param {LatLng[]} query.origins\n * @param {LatLng[]} query.destinations\n * @param {string} [query.mode]\n * @param {string} [query.language]\n * @param {string[]} [query.avoid]\n * @param {string} [query.units]\n * @param {Date|number} [query.departure_time]\n * @param {Date|number} [query.arrival_time]\n * @param {string[]} [query.transit_mode]\n * @param {string} [query.transit_routing_preference]\n * @param {string} [query.traffic_model]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.distanceMatrix = {\n  url: 'https://maps.googleapis.com/maps/api/distancematrix/json',\n  validator: v.compose([\n    v.mutuallyExclusiveProperties(['arrival_time', 'departure_time']),\n    v.object({\n      origins: utils.arrayOf(utils.latLng),\n      destinations: utils.arrayOf(utils.latLng),\n      mode: v.optional(v.oneOf([\n        'driving', 'walking', 'bicycling', 'transit'\n      ])),\n      language: v.optional(v.string),\n      region: v.optional(v.string),\n      avoid: v.optional(utils.arrayOf(v.oneOf([\n        'tolls', 'highways', 'ferries', 'indoor'\n      ]))),\n      units: v.optional(v.oneOf(['metric', 'imperial'])),\n      departure_time: v.optional(utils.timeStamp),\n      arrival_time: v.optional(utils.timeStamp),\n      transit_mode: v.optional(utils.arrayOf(v.oneOf([\n        'bus', 'subway', 'train', 'tram', 'rail'\n      ]))),\n      transit_routing_preference: v.optional(v.oneOf([\n        'less_walking', 'fewer_transfers'\n      ])),\n      traffic_model: v.optional(v.oneOf([\n        'best_guess', 'pessimistic', 'optimistic'\n      ])),\n      retryOptions: v.optional(utils.retryOptions),\n      timeout: v.optional(v.number)\n    })\n  ])\n};\n"]},"metadata":{},"sourceType":"script"}