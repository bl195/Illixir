{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar CircularBuffer = require('./circular-buffer');\n\nvar Task = require('./task');\n\nexports.inject = function (wait, getTime) {\n  return {\n    /**\n     * Creates a ThrottledQueue. The queue stores tasks, which will be executed\n     * asynchronously, at a controlled rate.\n     *\n     * @param {number} limit The maximum number of tasks that can be executed\n     *     over one period.\n     * @param {number} period The time period (ms) over which limit is\n     *     enforceable.\n     * @return {ThrottledQueue}\n     */\n    create: function (limit, period) {\n      var me = {};\n      var queue = Task.withValue();\n      var recentTimes = CircularBuffer.create(limit);\n      /**\n       * Adds a task to the work queue.\n       *\n       * @param {function(): Task<T>} doSomething Starts the task. This function\n       *     will be called when the rate limit allows.\n       * @return {Task<T>} The delayed task.\n       * @template T\n       */\n\n      me.add = function (doSomething) {\n        // Return a separate task from the queue, so that cancelling a task\n        // doesn't propagate back and cancel the whole queue.\n        var waitForMyTurn = Task.start(function (resolve) {\n          queue.finally(resolve);\n        }).thenDo(function () {\n          var lastTime = recentTimes.item(limit - 1);\n          if (lastTime == undefined) return;\n          return wait(Math.max(lastTime + period - getTime(), 0));\n        }).thenDo(function () {\n          recentTimes.insert(getTime());\n        });\n        queue = queue.thenDo(function () {\n          return Task.start(function (resolve) {\n            waitForMyTurn.finally(resolve);\n          });\n        });\n        return waitForMyTurn.thenDo(doSomething);\n      };\n\n      return me;\n    }\n  };\n};","map":{"version":3,"sources":["/Users/brianli/Desktop/covid-19-app/covid-19-app/covid_19_hackathon_app/node_modules/@google/maps/lib/internal/throttled-queue.js"],"names":["CircularBuffer","require","Task","exports","inject","wait","getTime","create","limit","period","me","queue","withValue","recentTimes","add","doSomething","waitForMyTurn","start","resolve","finally","thenDo","lastTime","item","undefined","Math","max","insert"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,IAAIA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA5B;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAAlB;;AAEAE,OAAO,CAACC,MAAR,GAAiB,UAASC,IAAT,EAAeC,OAAf,EAAwB;AACvC,SAAO;AACL;;;;;;;;;;AAUAC,IAAAA,MAAM,EAAE,UAASC,KAAT,EAAgBC,MAAhB,EAAwB;AAC9B,UAAIC,EAAE,GAAG,EAAT;AACA,UAAIC,KAAK,GAAGT,IAAI,CAACU,SAAL,EAAZ;AACA,UAAIC,WAAW,GAAGb,cAAc,CAACO,MAAf,CAAsBC,KAAtB,CAAlB;AAEA;;;;;;;;;AAQAE,MAAAA,EAAE,CAACI,GAAH,GAAS,UAASC,WAAT,EAAsB;AAC7B;AACA;AACA,YAAIC,aAAa,GAAGd,IAAI,CACnBe,KADe,CACT,UAASC,OAAT,EAAkB;AACvBP,UAAAA,KAAK,CAACQ,OAAN,CAAcD,OAAd;AACD,SAHe,EAIfE,MAJe,CAIR,YAAW;AACjB,cAAIC,QAAQ,GAAGR,WAAW,CAACS,IAAZ,CAAiBd,KAAK,GAAG,CAAzB,CAAf;AACA,cAAIa,QAAQ,IAAIE,SAAhB,EAA2B;AAC3B,iBAAOlB,IAAI,CAACmB,IAAI,CAACC,GAAL,CAASJ,QAAQ,GAAGZ,MAAX,GAAoBH,OAAO,EAApC,EAAwC,CAAxC,CAAD,CAAX;AACD,SARe,EASfc,MATe,CASR,YAAW;AACjBP,UAAAA,WAAW,CAACa,MAAZ,CAAmBpB,OAAO,EAA1B;AACD,SAXe,CAApB;AAaAK,QAAAA,KAAK,GAAGA,KAAK,CAACS,MAAN,CAAa,YAAW;AAC9B,iBAAOlB,IAAI,CAACe,KAAL,CAAW,UAASC,OAAT,EAAkB;AAClCF,YAAAA,aAAa,CAACG,OAAd,CAAsBD,OAAtB;AACD,WAFM,CAAP;AAGD,SAJO,CAAR;AAMA,eAAOF,aAAa,CAACI,MAAd,CAAqBL,WAArB,CAAP;AACD,OAvBD;;AAyBA,aAAOL,EAAP;AACD;AAlDI,GAAP;AAoDD,CArDD","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar CircularBuffer = require('./circular-buffer');\nvar Task = require('./task');\n\nexports.inject = function(wait, getTime) {\n  return {\n    /**\n     * Creates a ThrottledQueue. The queue stores tasks, which will be executed\n     * asynchronously, at a controlled rate.\n     *\n     * @param {number} limit The maximum number of tasks that can be executed\n     *     over one period.\n     * @param {number} period The time period (ms) over which limit is\n     *     enforceable.\n     * @return {ThrottledQueue}\n     */\n    create: function(limit, period) {\n      var me = {};\n      var queue = Task.withValue();\n      var recentTimes = CircularBuffer.create(limit);\n\n      /**\n       * Adds a task to the work queue.\n       *\n       * @param {function(): Task<T>} doSomething Starts the task. This function\n       *     will be called when the rate limit allows.\n       * @return {Task<T>} The delayed task.\n       * @template T\n       */\n      me.add = function(doSomething) {\n        // Return a separate task from the queue, so that cancelling a task\n        // doesn't propagate back and cancel the whole queue.\n        var waitForMyTurn = Task\n            .start(function(resolve) {\n              queue.finally(resolve);\n            })\n            .thenDo(function() {\n              var lastTime = recentTimes.item(limit - 1);\n              if (lastTime == undefined) return;\n              return wait(Math.max(lastTime + period - getTime(), 0));\n            })\n            .thenDo(function() {\n              recentTimes.insert(getTime());\n            });\n\n        queue = queue.thenDo(function() {\n          return Task.start(function(resolve) {\n            waitForMyTurn.finally(resolve);\n          });\n        });\n\n        return waitForMyTurn.thenDo(doSomething);\n      };\n\n      return me;\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"script"}