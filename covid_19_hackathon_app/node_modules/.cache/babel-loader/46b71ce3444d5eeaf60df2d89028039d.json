{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n;\n\nvar utils = require('../internal/convert');\n\nvar v = require('../internal/validate');\n/**\n * Makes a geocode request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.geocode\n * @function\n * @param {Object} query\n * @param {string} [query.address]\n * @param {Object} [query.components]\n * @param {Object} [query.bounds]\n * @param {number} query.bounds.south\n * @param {number} query.bounds.west\n * @param {number} query.bounds.north\n * @param {number} query.bounds.east\n * @param {string} [query.region]\n * @param {string} [query.language]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\n\nexports.geocode = {\n  url: 'https://maps.googleapis.com/maps/api/geocode/json',\n  validator: v.object({\n    address: v.optional(v.string),\n    components: v.optional(utils.pipedKeyValues),\n    bounds: v.optional(utils.bounds),\n    region: v.optional(v.string),\n    language: v.optional(v.string),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n/**\n * Makes a reverse geocode request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.reverseGeocode\n * @function\n * @param {Object} query\n * @param {LatLng} [query.latlng]\n * @param {string} [query.place_id]\n * @param {string} [query.result_type]\n * @param {string} [query.location_type]\n * @param {string} [query.language]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\nexports.reverseGeocode = {\n  url: 'https://maps.googleapis.com/maps/api/geocode/json',\n  validator: v.compose([v.mutuallyExclusiveProperties(['place_id', 'latlng']), v.mutuallyExclusiveProperties(['place_id', 'result_type']), v.mutuallyExclusiveProperties(['place_id', 'location_type']), v.object({\n    latlng: v.optional(utils.latLng),\n    place_id: v.optional(v.string),\n    result_type: v.optional(utils.arrayOf(v.string)),\n    location_type: v.optional(utils.arrayOf(v.oneOf(['ROOFTOP', 'RANGE_INTERPOLATED', 'GEOMETRIC_CENTER', 'APPROXIMATE']))),\n    language: v.optional(v.string),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })])\n};","map":{"version":3,"sources":["/Users/brianli/Desktop/covid-19-app/covid-19-app/covid_19_hackathon_app/node_modules/@google/maps/lib/apis/geocode.js"],"names":["utils","require","v","exports","geocode","url","validator","object","address","optional","string","components","pipedKeyValues","bounds","region","language","retryOptions","timeout","number","reverseGeocode","compose","mutuallyExclusiveProperties","latlng","latLng","place_id","result_type","arrayOf","location_type","oneOf"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAeG;;AAEH,IAAIA,KAAK,GAAGC,OAAO,CAAC,qBAAD,CAAnB;;AACA,IAAIC,CAAC,GAAGD,OAAO,CAAC,sBAAD,CAAf;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBAE,OAAO,CAACC,OAAR,GAAkB;AAChBC,EAAAA,GAAG,EAAE,mDADW;AAEhBC,EAAAA,SAAS,EAAEJ,CAAC,CAACK,MAAF,CAAS;AAClBC,IAAAA,OAAO,EAAEN,CAAC,CAACO,QAAF,CAAWP,CAAC,CAACQ,MAAb,CADS;AAElBC,IAAAA,UAAU,EAAET,CAAC,CAACO,QAAF,CAAWT,KAAK,CAACY,cAAjB,CAFM;AAGlBC,IAAAA,MAAM,EAAEX,CAAC,CAACO,QAAF,CAAWT,KAAK,CAACa,MAAjB,CAHU;AAIlBC,IAAAA,MAAM,EAAEZ,CAAC,CAACO,QAAF,CAAWP,CAAC,CAACQ,MAAb,CAJU;AAKlBK,IAAAA,QAAQ,EAAEb,CAAC,CAACO,QAAF,CAAWP,CAAC,CAACQ,MAAb,CALQ;AAMlBM,IAAAA,YAAY,EAAEd,CAAC,CAACO,QAAF,CAAWT,KAAK,CAACgB,YAAjB,CANI;AAOlBC,IAAAA,OAAO,EAAEf,CAAC,CAACO,QAAF,CAAWP,CAAC,CAACgB,MAAb;AAPS,GAAT;AAFK,CAAlB;AAaA;;;;;;;;;;;;;;;;AAeAf,OAAO,CAACgB,cAAR,GAAyB;AACvBd,EAAAA,GAAG,EAAE,mDADkB;AAEvBC,EAAAA,SAAS,EAAEJ,CAAC,CAACkB,OAAF,CAAU,CACnBlB,CAAC,CAACmB,2BAAF,CAA8B,CAAC,UAAD,EAAa,QAAb,CAA9B,CADmB,EAEnBnB,CAAC,CAACmB,2BAAF,CAA8B,CAAC,UAAD,EAAa,aAAb,CAA9B,CAFmB,EAGnBnB,CAAC,CAACmB,2BAAF,CAA8B,CAAC,UAAD,EAAa,eAAb,CAA9B,CAHmB,EAInBnB,CAAC,CAACK,MAAF,CAAS;AACPe,IAAAA,MAAM,EAAEpB,CAAC,CAACO,QAAF,CAAWT,KAAK,CAACuB,MAAjB,CADD;AAEPC,IAAAA,QAAQ,EAAEtB,CAAC,CAACO,QAAF,CAAWP,CAAC,CAACQ,MAAb,CAFH;AAGPe,IAAAA,WAAW,EAAEvB,CAAC,CAACO,QAAF,CAAWT,KAAK,CAAC0B,OAAN,CAAcxB,CAAC,CAACQ,MAAhB,CAAX,CAHN;AAIPiB,IAAAA,aAAa,EAAEzB,CAAC,CAACO,QAAF,CAAWT,KAAK,CAAC0B,OAAN,CAAcxB,CAAC,CAAC0B,KAAF,CAAQ,CAC9C,SAD8C,EACnC,oBADmC,EACb,kBADa,EACO,aADP,CAAR,CAAd,CAAX,CAJR;AAOPb,IAAAA,QAAQ,EAAEb,CAAC,CAACO,QAAF,CAAWP,CAAC,CAACQ,MAAb,CAPH;AAQPM,IAAAA,YAAY,EAAEd,CAAC,CAACO,QAAF,CAAWT,KAAK,CAACgB,YAAjB,CARP;AASPC,IAAAA,OAAO,EAAEf,CAAC,CAACO,QAAF,CAAWP,CAAC,CAACgB,MAAb;AATF,GAAT,CAJmB,CAAV;AAFY,CAAzB","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */;\n\nvar utils = require('../internal/convert');\nvar v = require('../internal/validate');\n\n/**\n * Makes a geocode request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.geocode\n * @function\n * @param {Object} query\n * @param {string} [query.address]\n * @param {Object} [query.components]\n * @param {Object} [query.bounds]\n * @param {number} query.bounds.south\n * @param {number} query.bounds.west\n * @param {number} query.bounds.north\n * @param {number} query.bounds.east\n * @param {string} [query.region]\n * @param {string} [query.language]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.geocode = {\n  url: 'https://maps.googleapis.com/maps/api/geocode/json',\n  validator: v.object({\n    address: v.optional(v.string),\n    components: v.optional(utils.pipedKeyValues),\n    bounds: v.optional(utils.bounds),\n    region: v.optional(v.string),\n    language: v.optional(v.string),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n\n/**\n * Makes a reverse geocode request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.reverseGeocode\n * @function\n * @param {Object} query\n * @param {LatLng} [query.latlng]\n * @param {string} [query.place_id]\n * @param {string} [query.result_type]\n * @param {string} [query.location_type]\n * @param {string} [query.language]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.reverseGeocode = {\n  url: 'https://maps.googleapis.com/maps/api/geocode/json',\n  validator: v.compose([\n    v.mutuallyExclusiveProperties(['place_id', 'latlng']),\n    v.mutuallyExclusiveProperties(['place_id', 'result_type']),\n    v.mutuallyExclusiveProperties(['place_id', 'location_type']),\n    v.object({\n      latlng: v.optional(utils.latLng),\n      place_id: v.optional(v.string),\n      result_type: v.optional(utils.arrayOf(v.string)),\n      location_type: v.optional(utils.arrayOf(v.oneOf([\n        'ROOFTOP', 'RANGE_INTERPOLATED', 'GEOMETRIC_CENTER', 'APPROXIMATE'\n      ]))),\n      language: v.optional(v.string),\n      retryOptions: v.optional(utils.retryOptions),\n      timeout: v.optional(v.number)\n    })\n  ])\n};\n"]},"metadata":{},"sourceType":"script"}