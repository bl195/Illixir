{"ast":null,"code":"import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\"; // reducers take the current state of the tree and the action and return the next state\n// initial state of store\n\nconst initialState = {}; // thunk - calls actions that are functions and returns values\n\nconst middleware = [thunk]; // store is a maintainer that has a few methods:\n// getState() - returns current state\n// dispatch(action) - dispatch an action to change state\n// subscribe(listener) - listens to changes in state tree\n// replaceReducer(nextReducer) - replaces reducer\n\nconst store = createStore(rootReducer, initialState, compose(applyMiddleware(...middleware), window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__() || compose));\nexport default store;","map":{"version":3,"sources":["/Users/brianli/Desktop/covid-19-app/covid-19-app/covid_19_hackathon_app/src/store.js"],"names":["createStore","applyMiddleware","compose","thunk","rootReducer","initialState","middleware","store","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,YAAxB,C,CAAsC;AAEtC;;AACA,MAAMC,YAAY,GAAG,EAArB,C,CAEA;;AACA,MAAMC,UAAU,GAAG,CAACH,KAAD,CAAnB,C,CAEA;AACA;AACA;AACA;AACA;;AACA,MAAMI,KAAK,GAAGP,WAAW,CACvBI,WADuB,EAEvBC,YAFuB,EAGvBH,OAAO,CACLD,eAAe,CAAC,GAAGK,UAAJ,CADV,EAEJE,MAAM,CAACC,oCAAP,IACCD,MAAM,CAACC,oCAAP,EADF,IAEEP,OAJG,CAHgB,CAAzB;AAWA,eAAeK,KAAf","sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\"; // reducers take the current state of the tree and the action and return the next state\n\n// initial state of store\nconst initialState = {};\n\n// thunk - calls actions that are functions and returns values\nconst middleware = [thunk];\n\n// store is a maintainer that has a few methods:\n// getState() - returns current state\n// dispatch(action) - dispatch an action to change state\n// subscribe(listener) - listens to changes in state tree\n// replaceReducer(nextReducer) - replaces reducer\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()) ||\n      compose\n  )\n);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}