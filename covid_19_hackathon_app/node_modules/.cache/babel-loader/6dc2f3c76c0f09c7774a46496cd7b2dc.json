{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n;\n\nvar utils = require('../internal/convert');\n\nvar v = require('../internal/validate');\n/**\n * Makes a geolocation request.\n *\n * For a detailed guide, see https://developers.google.com/maps/documentation/geolocation/intro\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.geolocate\n * @function\n * @param {Object} query\n * @param {number} [query.homeMobileCountryCode]\n * @param {number} [query.homeMobileNetworkCode]\n * @param {string} [query.radioType]\n * @param {string} [query.carrier]\n * @param {boolean} [query.considerIp]\n * @param {Object[]} [query.cellTowers]\n * @param {Object[]} [query.wifiAccessPoints]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\n\n\nexports.geolocate = {\n  url: 'https://www.googleapis.com/geolocation/v1/geolocate',\n  options: {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json;'\n    },\n    canRetry: function (response) {\n      return response.status === 403;\n    },\n    isSuccessful: function (response) {\n      return response.status === 200 || response.status === 404;\n    }\n  },\n  validator: v.object({\n    homeMobileCountryCode: v.optional(v.number),\n    homeMobileNetworkCode: v.optional(v.number),\n    radioType: v.optional(v.string),\n    carrier: v.optional(v.string),\n    considerIp: v.optional(v.boolean),\n    cellTowers: v.optional(v.array(v.object({\n      cellId: v.number,\n      locationAreaCode: v.number,\n      mobileCountryCode: v.number,\n      mobileNetworkCode: v.number,\n      age: v.optional(v.number),\n      signalStrength: v.optional(v.number),\n      timingAdvance: v.optional(v.number)\n    }))),\n    wifiAccessPoints: v.optional(v.array(v.object({\n      macAddress: v.string,\n      signalStrength: v.optional(v.number),\n      age: v.optional(v.number),\n      channel: v.optional(v.number),\n      signalToNoiseRatio: v.optional(v.number)\n    }))),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};","map":{"version":3,"sources":["/Users/brianli/Desktop/covid-19-app/covid-19-app/covid_19_hackathon_app/node_modules/@google/maps/lib/apis/geolocation.js"],"names":["utils","require","v","exports","geolocate","url","options","method","headers","canRetry","response","status","isSuccessful","validator","object","homeMobileCountryCode","optional","number","homeMobileNetworkCode","radioType","string","carrier","considerIp","boolean","cellTowers","array","cellId","locationAreaCode","mobileCountryCode","mobileNetworkCode","age","signalStrength","timingAdvance","wifiAccessPoints","macAddress","channel","signalToNoiseRatio","retryOptions","timeout"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAeG;;AAEH,IAAIA,KAAK,GAAGC,OAAO,CAAC,qBAAD,CAAnB;;AACA,IAAIC,CAAC,GAAGD,OAAO,CAAC,sBAAD,CAAf;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBAE,OAAO,CAACC,SAAR,GAAoB;AAClBC,EAAAA,GAAG,EAAE,qDADa;AAElBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EAAE,MADD;AAEPC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB,KAFF;AAGPC,IAAAA,QAAQ,EAAE,UAASC,QAAT,EAAmB;AAC3B,aAAOA,QAAQ,CAACC,MAAT,KAAoB,GAA3B;AACD,KALM;AAMPC,IAAAA,YAAY,EAAE,UAASF,QAAT,EAAmB;AAC/B,aAAOA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2BD,QAAQ,CAACC,MAAT,KAAoB,GAAtD;AACD;AARM,GAFS;AAYlBE,EAAAA,SAAS,EAAEX,CAAC,CAACY,MAAF,CAAS;AAClBC,IAAAA,qBAAqB,EAAEb,CAAC,CAACc,QAAF,CAAWd,CAAC,CAACe,MAAb,CADL;AAElBC,IAAAA,qBAAqB,EAAEhB,CAAC,CAACc,QAAF,CAAWd,CAAC,CAACe,MAAb,CAFL;AAGlBE,IAAAA,SAAS,EAAEjB,CAAC,CAACc,QAAF,CAAWd,CAAC,CAACkB,MAAb,CAHO;AAIlBC,IAAAA,OAAO,EAAEnB,CAAC,CAACc,QAAF,CAAWd,CAAC,CAACkB,MAAb,CAJS;AAKlBE,IAAAA,UAAU,EAAEpB,CAAC,CAACc,QAAF,CAAWd,CAAC,CAACqB,OAAb,CALM;AAMlBC,IAAAA,UAAU,EAAEtB,CAAC,CAACc,QAAF,CAAWd,CAAC,CAACuB,KAAF,CAAQvB,CAAC,CAACY,MAAF,CAAS;AACtCY,MAAAA,MAAM,EAAExB,CAAC,CAACe,MAD4B;AAEtCU,MAAAA,gBAAgB,EAAEzB,CAAC,CAACe,MAFkB;AAGtCW,MAAAA,iBAAiB,EAAE1B,CAAC,CAACe,MAHiB;AAItCY,MAAAA,iBAAiB,EAAE3B,CAAC,CAACe,MAJiB;AAKtCa,MAAAA,GAAG,EAAE5B,CAAC,CAACc,QAAF,CAAWd,CAAC,CAACe,MAAb,CALiC;AAMtCc,MAAAA,cAAc,EAAE7B,CAAC,CAACc,QAAF,CAAWd,CAAC,CAACe,MAAb,CANsB;AAOtCe,MAAAA,aAAa,EAAE9B,CAAC,CAACc,QAAF,CAAWd,CAAC,CAACe,MAAb;AAPuB,KAAT,CAAR,CAAX,CANM;AAelBgB,IAAAA,gBAAgB,EAAE/B,CAAC,CAACc,QAAF,CAAWd,CAAC,CAACuB,KAAF,CAAQvB,CAAC,CAACY,MAAF,CAAS;AAC5CoB,MAAAA,UAAU,EAAEhC,CAAC,CAACkB,MAD8B;AAE5CW,MAAAA,cAAc,EAAE7B,CAAC,CAACc,QAAF,CAAWd,CAAC,CAACe,MAAb,CAF4B;AAG5Ca,MAAAA,GAAG,EAAE5B,CAAC,CAACc,QAAF,CAAWd,CAAC,CAACe,MAAb,CAHuC;AAI5CkB,MAAAA,OAAO,EAAEjC,CAAC,CAACc,QAAF,CAAWd,CAAC,CAACe,MAAb,CAJmC;AAK5CmB,MAAAA,kBAAkB,EAAElC,CAAC,CAACc,QAAF,CAAWd,CAAC,CAACe,MAAb;AALwB,KAAT,CAAR,CAAX,CAfA;AAsBlBoB,IAAAA,YAAY,EAAEnC,CAAC,CAACc,QAAF,CAAWhB,KAAK,CAACqC,YAAjB,CAtBI;AAuBlBC,IAAAA,OAAO,EAAEpC,CAAC,CAACc,QAAF,CAAWd,CAAC,CAACe,MAAb;AAvBS,GAAT;AAZO,CAApB","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */;\n\nvar utils = require('../internal/convert');\nvar v = require('../internal/validate');\n\n/**\n * Makes a geolocation request.\n *\n * For a detailed guide, see https://developers.google.com/maps/documentation/geolocation/intro\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.geolocate\n * @function\n * @param {Object} query\n * @param {number} [query.homeMobileCountryCode]\n * @param {number} [query.homeMobileNetworkCode]\n * @param {string} [query.radioType]\n * @param {string} [query.carrier]\n * @param {boolean} [query.considerIp]\n * @param {Object[]} [query.cellTowers]\n * @param {Object[]} [query.wifiAccessPoints]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.geolocate = {\n  url: 'https://www.googleapis.com/geolocation/v1/geolocate',\n  options: {\n    method: 'POST',\n    headers: {'content-type': 'application/json;'},\n    canRetry: function(response) {\n      return response.status === 403;\n    },\n    isSuccessful: function(response) {\n      return response.status === 200 || response.status === 404;\n    }\n  },\n  validator: v.object({\n    homeMobileCountryCode: v.optional(v.number),\n    homeMobileNetworkCode: v.optional(v.number),\n    radioType: v.optional(v.string),\n    carrier: v.optional(v.string),\n    considerIp: v.optional(v.boolean),\n    cellTowers: v.optional(v.array(v.object({\n      cellId: v.number,\n      locationAreaCode: v.number,\n      mobileCountryCode: v.number,\n      mobileNetworkCode: v.number,\n      age: v.optional(v.number),\n      signalStrength: v.optional(v.number),\n      timingAdvance: v.optional(v.number)\n    }))),\n    wifiAccessPoints: v.optional(v.array(v.object({\n      macAddress: v.string,\n      signalStrength: v.optional(v.number),\n      age: v.optional(v.number),\n      channel: v.optional(v.number),\n      signalToNoiseRatio: v.optional(v.number)\n    }))),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n"]},"metadata":{},"sourceType":"script"}