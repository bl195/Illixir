{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Google Maps Service module.\n * @module @google/maps\n */\n\n/**\n * Creates a Google Maps client. The client object contains all the API methods.\n *\n * @param {Object} options\n * @param {string} options.key API key (required, unless clientID and\n *     clientSecret provided).\n * @param {string=} options.clientId Maps API for Work client ID.\n * @param {string=} options.clientSecret Maps API for Work client secret (a.k.a.\n *     private key).\n * @param {string=} options.channel Maps API for Work channel.\n * @param {number=} options.timeout Timeout in milliseconds.\n *     (Default: 60 * 1000 ms)\n * @param {string=} options.language Default language for all queries.\n        See https://developers.google.com/maps/faq#languagesupport\n * @param {number=} options.rate.limit Controls rate-limiting of requests.\n *     Maximum number of requests per period. (Default: 50)\n * @param {number=} options.rate.period Period for rate limit, in milliseconds.\n *     (Default: 1000 ms)\n * @param {number=} options.retryOptions.interval If a transient server error\n *     occurs, how long to wait before retrying the request, in milliseconds.\n *     (Default: 500 ms)\n * @param {Function=} options.Promise - Promise constructor (optional).\n * @return {GoogleMapsClient} The client object containing all API methods.\n */\nexports.createClient = function (options) {\n  options = options || {};\n\n  if (options.experienceId && typeof options.experienceId === \"string\") {\n    options.experienceId = [options.experienceId];\n  }\n\n  var makeApiCall = require(\"./internal/make-api-call\").inject(options);\n\n  var deprecate = require(\"util\").deprecate;\n\n  var makeApiMethod = function (apiConfig) {\n    return function (query, callback, customParams) {\n      query = apiConfig.validator(query);\n      query.supportsClientId = apiConfig.supportsClientId !== false;\n      query.options = apiConfig.options;\n\n      if (options.language && !query.language) {\n        query.language = options.language;\n      } // Merge query and customParams.\n\n\n      var finalQuery = {};\n      customParams = customParams || {};\n      [query, customParams].map(function (obj) {\n        Object.keys(obj).sort().map(function (key) {\n          finalQuery[key] = obj[key];\n        });\n      });\n      return makeApiCall(apiConfig.url, finalQuery, callback);\n    };\n  };\n\n  var geocode = require(\"./apis/geocode\");\n\n  var geolocation = require(\"./apis/geolocation\");\n\n  var timezone = require(\"./apis/timezone\");\n\n  var directions = require(\"./apis/directions\");\n\n  var distanceMatrix = require(\"./apis/distance-matrix\");\n\n  var elevation = require(\"./apis/elevation\");\n\n  var roads = require(\"./apis/roads\");\n\n  var places = require(\"./apis/places\");\n\n  return {\n    directions: makeApiMethod(directions.directions),\n    distanceMatrix: makeApiMethod(distanceMatrix.distanceMatrix),\n    elevation: makeApiMethod(elevation.elevation),\n    elevationAlongPath: makeApiMethod(elevation.elevationAlongPath),\n    geocode: makeApiMethod(geocode.geocode),\n    geolocate: makeApiMethod(geolocation.geolocate),\n    reverseGeocode: makeApiMethod(geocode.reverseGeocode),\n    findPlace: makeApiMethod(places.findPlace),\n    places: makeApiMethod(places.places),\n    placesNearby: makeApiMethod(places.placesNearby),\n    place: makeApiMethod(places.place),\n    placesPhoto: makeApiMethod(places.placesPhoto),\n    placesAutoComplete: makeApiMethod(places.placesAutoComplete),\n    placesQueryAutoComplete: makeApiMethod(places.placesQueryAutoComplete),\n    snapToRoads: makeApiMethod(roads.snapToRoads),\n    nearestRoads: makeApiMethod(roads.nearestRoads),\n    speedLimits: makeApiMethod(roads.speedLimits),\n    snappedSpeedLimits: makeApiMethod(roads.snappedSpeedLimits),\n    timezone: makeApiMethod(timezone.timezone),\n    setExperienceId: (...ids) => {\n      if (typeof ids === \"string\") {\n        ids = [ids];\n      }\n\n      options.experienceId = ids;\n    },\n    getExperienceId: _ => options.experienceId,\n    clearExperienceId: _ => {\n      options.experienceId = null;\n    }\n  };\n};\n\nexports.cli = require(\"./internal/cli\");\nexports.util = require(\"./util\");","map":{"version":3,"sources":["/Users/brianli/Desktop/covid-19-app/covid-19-app/covid_19_hackathon_app/node_modules/@google/maps/lib/index.js"],"names":["exports","createClient","options","experienceId","makeApiCall","require","inject","deprecate","makeApiMethod","apiConfig","query","callback","customParams","validator","supportsClientId","language","finalQuery","map","obj","Object","keys","sort","key","url","geocode","geolocation","timezone","directions","distanceMatrix","elevation","roads","places","elevationAlongPath","geolocate","reverseGeocode","findPlace","placesNearby","place","placesPhoto","placesAutoComplete","placesQueryAutoComplete","snapToRoads","nearestRoads","speedLimits","snappedSpeedLimits","setExperienceId","ids","getExperienceId","_","clearExperienceId","cli","util"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Google Maps Service module.\n * @module @google/maps\n */\n\n/**\n * Creates a Google Maps client. The client object contains all the API methods.\n *\n * @param {Object} options\n * @param {string} options.key API key (required, unless clientID and\n *     clientSecret provided).\n * @param {string=} options.clientId Maps API for Work client ID.\n * @param {string=} options.clientSecret Maps API for Work client secret (a.k.a.\n *     private key).\n * @param {string=} options.channel Maps API for Work channel.\n * @param {number=} options.timeout Timeout in milliseconds.\n *     (Default: 60 * 1000 ms)\n * @param {string=} options.language Default language for all queries.\n        See https://developers.google.com/maps/faq#languagesupport\n * @param {number=} options.rate.limit Controls rate-limiting of requests.\n *     Maximum number of requests per period. (Default: 50)\n * @param {number=} options.rate.period Period for rate limit, in milliseconds.\n *     (Default: 1000 ms)\n * @param {number=} options.retryOptions.interval If a transient server error\n *     occurs, how long to wait before retrying the request, in milliseconds.\n *     (Default: 500 ms)\n * @param {Function=} options.Promise - Promise constructor (optional).\n * @return {GoogleMapsClient} The client object containing all API methods.\n */\nexports.createClient = function(options) {\n  options = options || {};\n\n  if (options.experienceId && typeof options.experienceId === \"string\") {\n    options.experienceId = [options.experienceId];\n  }\n\n  var makeApiCall = require(\"./internal/make-api-call\").inject(options);\n  var deprecate = require(\"util\").deprecate;\n\n  var makeApiMethod = function(apiConfig) {\n    return function(query, callback, customParams) {\n      query = apiConfig.validator(query);\n      query.supportsClientId = apiConfig.supportsClientId !== false;\n      query.options = apiConfig.options;\n      if (options.language && !query.language) {\n        query.language = options.language;\n      }\n      // Merge query and customParams.\n      var finalQuery = {};\n      customParams = customParams || {};\n      [query, customParams].map(function(obj) {\n        Object.keys(obj)\n          .sort()\n          .map(function(key) {\n            finalQuery[key] = obj[key];\n          });\n      });\n      return makeApiCall(apiConfig.url, finalQuery, callback);\n    };\n  };\n\n  var geocode = require(\"./apis/geocode\");\n  var geolocation = require(\"./apis/geolocation\");\n  var timezone = require(\"./apis/timezone\");\n  var directions = require(\"./apis/directions\");\n  var distanceMatrix = require(\"./apis/distance-matrix\");\n  var elevation = require(\"./apis/elevation\");\n  var roads = require(\"./apis/roads\");\n  var places = require(\"./apis/places\");\n\n  return {\n    directions: makeApiMethod(directions.directions),\n    distanceMatrix: makeApiMethod(distanceMatrix.distanceMatrix),\n    elevation: makeApiMethod(elevation.elevation),\n    elevationAlongPath: makeApiMethod(elevation.elevationAlongPath),\n    geocode: makeApiMethod(geocode.geocode),\n    geolocate: makeApiMethod(geolocation.geolocate),\n    reverseGeocode: makeApiMethod(geocode.reverseGeocode),\n    findPlace: makeApiMethod(places.findPlace),\n    places: makeApiMethod(places.places),\n    placesNearby: makeApiMethod(places.placesNearby),\n    place: makeApiMethod(places.place),\n    placesPhoto: makeApiMethod(places.placesPhoto),\n    placesAutoComplete: makeApiMethod(places.placesAutoComplete),\n    placesQueryAutoComplete: makeApiMethod(places.placesQueryAutoComplete),\n    snapToRoads: makeApiMethod(roads.snapToRoads),\n    nearestRoads: makeApiMethod(roads.nearestRoads),\n    speedLimits: makeApiMethod(roads.speedLimits),\n    snappedSpeedLimits: makeApiMethod(roads.snappedSpeedLimits),\n    timezone: makeApiMethod(timezone.timezone),\n    setExperienceId: (...ids) => {\n      if (typeof ids === \"string\") {\n        ids = [ids];\n      }\n      options.experienceId = ids;\n    },\n    getExperienceId: _ => options.experienceId,\n    clearExperienceId: _ => {\n      options.experienceId = null;\n    }\n  };\n};\n\nexports.cli = require(\"./internal/cli\");\nexports.util = require(\"./util\");\n"]},"metadata":{},"sourceType":"script"}