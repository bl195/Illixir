{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./authActionTypes\"; // Actions are payloads of information that you send to your store.\n// They must include a type, which is a string variable and a payload of information.\n// The reducer is the type and will perform an action.\n// Register User\n// Adds user to the database\n// Adds a string to the history\n// returns an action of type GET_ERRORS and the response error\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"http://localhost:5000/api/users/register\", userData).then(res => {\n    history.push(\"/login\");\n    alert(\"hi\");\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n// Checks user valid\n// Sets token and then sets the current user\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"http://localhost:5000/api/users/login\", userData).then(res => {\n    // Sets token to the response data\n    const {\n      token\n    } = res.data;\n    alert(\"hi\");\n    alert(JSON.stringify(res.data));\n    localStorage.setItem(\"jwtToken\", token); // Set axios header to token\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n    window.location = '/dashboard/home';\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/brianli/Desktop/covid-19-app/covid-19-app/covid_19_hackathon_app/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","alert","catch","err","type","payload","response","data","loginUser","token","JSON","stringify","localStorage","setItem","decoded","setCurrentUser","window","location","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,mBAA3D,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7DT,EAAAA,KAAK,CACFU,IADH,CACQ,0CADR,EACoDH,QADpD,EAEGI,IAFH,CAESC,GAAD,IAAS;AACbJ,IAAAA,OAAO,CAACK,IAAR,CAAa,QAAb;AACAC,IAAAA,KAAK,CAAC,IAAD,CAAL;AACD,GALH,EAMGC,KANH,CAMSC,GAAG,IACRP,QAAQ,CAAC;AACPQ,IAAAA,IAAI,EAAEd,UADC;AAEPe,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAPZ;AAYD,CAbM,C,CAeP;AACA;AACA;;AACA,OAAO,MAAMC,SAAS,GAAGd,QAAQ,IAAIE,QAAQ,IAAI;AAC/CT,EAAAA,KAAK,CACFU,IADH,CACQ,uCADR,EACiDH,QADjD,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACX;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAYV,GAAG,CAACQ,IAAtB;AACAN,IAAAA,KAAK,CAAC,IAAD,CAAL;AACAA,IAAAA,KAAK,CAACS,IAAI,CAACC,SAAL,CAAeZ,GAAG,CAACQ,IAAnB,CAAD,CAAL;AACAK,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCJ,KAAjC,EALW,CAMX;;AACArB,IAAAA,YAAY,CAACqB,KAAD,CAAZ,CAPW,CAQX;;AACA,UAAMK,OAAO,GAAGzB,UAAU,CAACoB,KAAD,CAA1B,CATW,CAUX;;AACAb,IAAAA,QAAQ,CAACmB,cAAc,CAACD,OAAD,CAAf,CAAR;AACAE,IAAAA,MAAM,CAACC,QAAP,GAAkB,iBAAlB;AACD,GAfH,EAgBGf,KAhBH,CAgBSC,GAAG,IACRP,QAAQ,CAAC;AACPQ,IAAAA,IAAI,EAAEd,UADC;AAEPe,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAjBZ;AAsBD,CAvBM,C,CAyBP;;AACA,OAAO,MAAMQ,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLV,IAAAA,IAAI,EAAEb,gBADD;AAELc,IAAAA,OAAO,EAAES;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMI,cAAc,GAAG,MAAM;AAClC,SAAO;AACLd,IAAAA,IAAI,EAAEZ;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAM2B,UAAU,GAAG,MAAMvB,QAAQ,IAAI;AAC1C;AACAgB,EAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACAhC,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAQ,EAAAA,QAAQ,CAACmB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./authActionTypes\";\n\n// Actions are payloads of information that you send to your store.\n// They must include a type, which is a string variable and a payload of information.\n// The reducer is the type and will perform an action.\n\n// Register User\n// Adds user to the database\n// Adds a string to the history\n// returns an action of type GET_ERRORS and the response error\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"http://localhost:5000/api/users/register\", userData)\n    .then((res) => {\n      history.push(\"/login\");\n      alert(\"hi\")\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Login - get user token\n// Checks user valid\n// Sets token and then sets the current user\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"http://localhost:5000/api/users/login\", userData)\n    .then(res => {\n      // Sets token to the response data\n      const { token } = res.data;\n      alert(\"hi\");\n      alert(JSON.stringify(res.data));\n      localStorage.setItem(\"jwtToken\", token);\n      // Set axios header to token\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n      window.location = '/dashboard/home';\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}