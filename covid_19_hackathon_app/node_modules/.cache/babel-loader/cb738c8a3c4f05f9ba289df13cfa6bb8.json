{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexports.parseArgs = function (argv) {\n  var parsed = {};\n  var argv = argv || process.argv.slice(2);\n\n  for (var i = 0; i < argv.length; i += 2) {\n    var value = argv[i + 1];\n\n    try {\n      value = JSON.parse(value);\n    } catch (e) {}\n\n    var field = argv[i].replace(/^-*/g, '');\n    var existing = parsed[field];\n\n    if (Array.isArray(existing)) {\n      value = existing.concat(value);\n    } else if (existing != undefined) {\n      value = [existing, value];\n    }\n\n    parsed[field] = value;\n  }\n\n  return parsed;\n};\n\nexports.callback = function (error, response) {\n  if (error) {\n    console.log(\"Error:\", error.message != undefined ? error.message : error);\n  } else {\n    console.log(JSON.stringify(response.json, null, 4));\n  }\n};","map":{"version":3,"sources":["/Users/brianli/Desktop/covid-19-app/covid-19-app/covid_19_hackathon_app/node_modules/@google/maps/lib/internal/cli.js"],"names":["exports","parseArgs","argv","parsed","process","slice","i","length","value","JSON","parse","e","field","replace","existing","Array","isArray","concat","undefined","callback","error","response","console","log","message","stringify","json"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBAA,OAAO,CAACC,SAAR,GAAoB,UAASC,IAAT,EAAe;AACjC,MAAIC,MAAM,GAAG,EAAb;AACA,MAAID,IAAI,GAAGA,IAAI,IAAIE,OAAO,CAACF,IAAR,CAAaG,KAAb,CAAmB,CAAnB,CAAnB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;AACvC,QAAIE,KAAK,GAAGN,IAAI,CAACI,CAAC,GAAG,CAAL,CAAhB;;AACA,QAAI;AACFE,MAAAA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAR;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU,CACX;;AACD,QAAIC,KAAK,GAAGV,IAAI,CAACI,CAAD,CAAJ,CAAQO,OAAR,CAAgB,MAAhB,EAAwB,EAAxB,CAAZ;AACA,QAAIC,QAAQ,GAAGX,MAAM,CAACS,KAAD,CAArB;;AACA,QAAIG,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAJ,EAA6B;AAC3BN,MAAAA,KAAK,GAAGM,QAAQ,CAACG,MAAT,CAAgBT,KAAhB,CAAR;AACD,KAFD,MAEO,IAAIM,QAAQ,IAAII,SAAhB,EAA2B;AAChCV,MAAAA,KAAK,GAAG,CAACM,QAAD,EAAWN,KAAX,CAAR;AACD;;AACDL,IAAAA,MAAM,CAACS,KAAD,CAAN,GAAgBJ,KAAhB;AACD;;AACD,SAAOL,MAAP;AACD,CAnBD;;AAqBAH,OAAO,CAACmB,QAAR,GAAmB,UAASC,KAAT,EAAgBC,QAAhB,EAA0B;AAC3C,MAAID,KAAJ,EAAW;AACTE,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,KAAK,CAACI,OAAN,IAAiBN,SAAjB,GAA6BE,KAAK,CAACI,OAAnC,GAA6CJ,KAAnE;AACD,GAFD,MAEO;AACLE,IAAAA,OAAO,CAACC,GAAR,CAAYd,IAAI,CAACgB,SAAL,CAAeJ,QAAQ,CAACK,IAAxB,EAA8B,IAA9B,EAAoC,CAApC,CAAZ;AACD;AACF,CAND","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexports.parseArgs = function(argv) {\n  var parsed = {};\n  var argv = argv || process.argv.slice(2);\n  for (var i = 0; i < argv.length; i += 2) {\n    var value = argv[i + 1];\n    try {\n      value = JSON.parse(value);\n    } catch (e) {\n    }\n    var field = argv[i].replace(/^-*/g, '');\n    var existing = parsed[field];\n    if (Array.isArray(existing)) {\n      value = existing.concat(value);\n    } else if (existing != undefined) {\n      value = [existing, value];\n    }\n    parsed[field] = value;\n  }\n  return parsed;\n};\n\nexports.callback = function(error, response) {\n  if (error) {\n    console.log(\"Error:\", error.message != undefined ? error.message : error);\n  } else {\n    console.log(JSON.stringify(response.json, null, 4));\n  }\n};\n"]},"metadata":{},"sourceType":"script"}