{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar https = require('https');\n\nvar parse = require('url').parse;\n\nvar version = require('../version');\n\nvar HttpsProxyAgent = require('https-proxy-agent'); // add keep-alive header to speed up request\n\n\nvar agent = new https.Agent({\n  keepAlive: true\n});\n/**\n * Makes a secure HTTP GET request for the given URL.\n *\n * Calls the callback with two parameters (err, response). If there was an\n * error, response should be null. If there was no error, err should be null,\n * and response should be an object with these properties\n * {\n *   status: number,\n *   headers: Object,\n *   json: Object\n * }\n *\n * Returns a function that cancels the request.\n *\n * @param {string} url\n * @param {function(ClientResponse)} onSuccess\n * @param {function(?)} onError\n * @param {Object} options\n * @return {function()}\n */\n\nmodule.exports = function makeUrlRequest(url, onSuccess, onError, options) {\n  var requestOptions = parse(url);\n  var body; // Allow each API to provide some of the request options such as the\n  // HTTP method, headers, etc.\n\n  if (options) {\n    for (var k in options) {\n      if (k === 'body') {\n        body = options[k];\n      } else {\n        requestOptions[k] = options[k];\n      }\n    }\n  }\n\n  requestOptions.headers = requestOptions.headers || {};\n  requestOptions.headers['User-Agent'] = 'GoogleGeoApiClientJS/' + version; // HTTP/HTTPS proxy to connect from within the enterprise/corporate network\n\n  var proxy = process.env.http_proxy || process.env.https_proxy;\n\n  if (proxy) {\n    // create an instance of the `HttpsProxyAgent` class with the proxy server information\n    var proxyAgent = new HttpsProxyAgent(proxy);\n    requestOptions.agent = proxyAgent;\n  }\n\n  var request = https.request(requestOptions, function (response) {\n    response.on('error', function (error) {\n      onError(error);\n    });\n\n    if (response.statusCode === 302) {\n      // Handle redirect.\n      var url = response.headers['location'];\n      makeUrlRequest(url, onSuccess, onError, options);\n    } else if (response.headers['content-type'].toLowerCase() == 'application/json; charset=utf-8') {\n      // Handle JSON.\n      var data = [];\n      response.on('data', function (chunk) {\n        data.push(chunk);\n      });\n      response.on('end', function () {\n        var json;\n\n        try {\n          json = JSON.parse(Buffer.concat(data).toString());\n        } catch (error) {\n          onError(error);\n          return;\n        }\n\n        onSuccess({\n          status: response.statusCode,\n          headers: response.headers,\n          json: json\n        });\n      });\n    } else {\n      // Fallback is for binary data, namely places photo download,\n      // so just provide the response stream. Also provide the same\n      // consistent name for status checking as per JSON responses.\n      response.status = response.statusCode;\n      onSuccess(response);\n    }\n  }).on('error', function (error) {\n    onError(error);\n  });\n\n  if (body) {\n    request.write(JSON.stringify(body));\n  }\n\n  request.end();\n  return function cancel() {\n    request.abort();\n  };\n};","map":{"version":3,"sources":["/Users/brianli/Desktop/covid-19-app/covid-19-app/covid_19_hackathon_app/node_modules/@google/maps/lib/internal/make-url-request.js"],"names":["https","require","parse","version","HttpsProxyAgent","agent","Agent","keepAlive","module","exports","makeUrlRequest","url","onSuccess","onError","options","requestOptions","body","k","headers","proxy","process","env","http_proxy","https_proxy","proxyAgent","request","response","on","error","statusCode","toLowerCase","data","chunk","push","json","JSON","Buffer","concat","toString","status","write","stringify","end","cancel","abort"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar https = require('https');\nvar parse = require('url').parse;\nvar version = require('../version');\nvar HttpsProxyAgent = require('https-proxy-agent');\n\n// add keep-alive header to speed up request\nvar agent = new https.Agent({ keepAlive: true });\n\n\n/**\n * Makes a secure HTTP GET request for the given URL.\n *\n * Calls the callback with two parameters (err, response). If there was an\n * error, response should be null. If there was no error, err should be null,\n * and response should be an object with these properties\n * {\n *   status: number,\n *   headers: Object,\n *   json: Object\n * }\n *\n * Returns a function that cancels the request.\n *\n * @param {string} url\n * @param {function(ClientResponse)} onSuccess\n * @param {function(?)} onError\n * @param {Object} options\n * @return {function()}\n */\nmodule.exports = function makeUrlRequest(url, onSuccess, onError, options) {\n\n  var requestOptions = parse(url);\n  var body;\n\n  // Allow each API to provide some of the request options such as the\n  // HTTP method, headers, etc.\n  if (options) {\n    for (var k in options) {\n      if (k === 'body') {\n        body = options[k];\n      } else {\n        requestOptions[k] = options[k];\n      }\n    }\n  }\n\n  requestOptions.headers = requestOptions.headers || {};\n  requestOptions.headers['User-Agent'] = 'GoogleGeoApiClientJS/' + version;\n\n  // HTTP/HTTPS proxy to connect from within the enterprise/corporate network\n  var proxy = process.env.http_proxy || process.env.https_proxy\n\n  if (proxy) {\n    // create an instance of the `HttpsProxyAgent` class with the proxy server information\n    var proxyAgent = new HttpsProxyAgent(proxy)\n    requestOptions.agent = proxyAgent\n  }\n\n  var request = https.request(requestOptions, function (response) {\n\n    response.on('error', function (error) {\n      onError(error);\n    });\n\n    if (response.statusCode === 302) {\n      // Handle redirect.\n      var url = response.headers['location'];\n      makeUrlRequest(url, onSuccess, onError, options);\n    } else if (response.headers['content-type'].toLowerCase() == 'application/json; charset=utf-8') {\n      // Handle JSON.\n      var data = [];\n      response.on('data', function (chunk) {\n        data.push(chunk);\n      });\n      response.on('end', function () {\n        var json;\n        try {\n          json = JSON.parse(Buffer.concat(data).toString());\n        } catch (error) {\n          onError(error);\n          return;\n        }\n        onSuccess({\n          status: response.statusCode,\n          headers: response.headers,\n          json: json\n        })\n      });\n    } else {\n      // Fallback is for binary data, namely places photo download,\n      // so just provide the response stream. Also provide the same\n      // consistent name for status checking as per JSON responses.\n      response.status = response.statusCode;\n      onSuccess(response);\n    }\n\n  }).on('error', function (error) {\n    onError(error);\n  });\n\n  if (body) {\n    request.write(JSON.stringify(body));\n  }\n\n  request.end();\n\n  return function cancel() { request.abort(); };\n};\n"]},"metadata":{},"sourceType":"script"}